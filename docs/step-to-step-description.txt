procedimentos para automatizar processo de cruzamento focos x prodes_deter
*"dados de acesso a banco de dados de trabalho, ver arquivo completo com dados sensiveis"

1) focos

1.1) Download dos focos de calor do site http://queimadas.dgi.inpe.br/queimadas/bdqueimadas
Aqua Tarde (sat referencia) do ultimo mes

1.2) apendar tabela de focos em
*sensitive data

2) base deter

2.1) trazer deter da disseminacao do mes corrente
CREATE TABLE deter_20200901_20200930_amazonia AS 
SELECT t.gid as id, t.geom, t.classname, t.date as view_date, 
t.sensor, t.areamunkm 
FROM dblink('*sensitive data', 
'select gid,classname,date,sensor,areamunkm, geom from terrabrasilis.deter_table') 
as t(gid integer, classname character varying(255), date date, sensor character varying(10), 
areamunkm double precision, geom geometry) 
WHERE t.date >= '2020-09-01' and t.date <= '2020-09-30' 

2.2) apendar tabela resultado na tabela deter_all_amazonia
INSERT INTO public.deter_all_amazonia
SELECT nextval('deter_all_202009020_id_seq'::regclass), geom,classname, view_date, sensor, areamunkm
FROM deter_20200901_20200930_amazonia
WHERE id > 0;

2.1) usar ssh user senha pass na host (*sensitive data)

2.2) usar area /dados1/maurano/amz/buffer

2.3) gerar raster dos poligonos do Deter, classes CR, apos 01 ago 2019 (pixel value = 15)
gdal_rasterize -burn 15 -tr 0.000268999526293 -0.000269000921852 -te -73.9783164 -18.0406670 -43.9135844 5.2714909 -a_nodata 0 -ot Byte PG:"*sensitive data" -sql "SELECT geom FROM public.deter_20200901_20200930_amazonia where view_date >= '2019-08-01' and classname in ('DESMATAMENTO_VEG','DESMATAMENTO_CR','MINERACAO')" deter_recente_pv15.tif

2.4) gerar merge entre prodes recente 2018 e 2019 (pixel value 15) com deter recente (pixel value 15)
gdalbuildvrt prodes_deter_desmate_recente_pv15.vrt prodes_desmate_recente_pv15.tif deter_recente_pv15.tif
gdal_translate prodes_deter_desmate_recente_pv15.vrt  prodes_deter_desmate_recente_pv15.tif

3) calula mapa de distancias

3.1) calcula mapa de distancia com pixel value = 15 em /dados1/maurano/gdal_docker/
./gdal_3 "gdal_proximity.py /dados1/prodes_deter_desmate_recente_pv15.tif /dados1/prodes_deter_desmate_recente_pv15_dist.tif -values 15 -nodata 0 -ot Byte"

3.2) mover prodes_deter_desmate_recente_pv15_dist.tif para /dados1/maurano/amz/buffer
mv prodes_deter_desmate_recente_pv15_dist.tif /dados1/maurano/amz/buffer/prodes_deter_desmate_recente_pv15_dist.tif

3.3) fatia mapa de distancia com buffer de 0 a 500 m(de 0 a 17 pixels) saindo pixel value = 15
gdal_calc.py -A prodes_deter_desmate_recente_pv15_dist.tif --calc="(15*logical_and(A>=0,A<=17))" --NoDataValue=0 --outfile prodes_deter_desmate_recente_pv15_dist_fat.tif

3.4) gerar base unica floresta + desmate consolidado + desmate recente usando dados fatiados

gdalbuildvrt prodes_agregado.vrt  prodes_floresta_pv1.tif  prodes_desmate_consolidado_pv10_dist_fat.tif prodes_deter_desmate_recente_pv15_dist_fat.tif
gdal_translate prodes_agregado.vrt  prodes_agregado.tif &

4) python para popular tabela de atributos, rodar na chronos  /dados1/maurano/amz/buffer/python get_prodesclass.py

"""
Created on Thu Sep 24 11:20:25 2020

@author: Luis Maurano
"""

from osgeo import gdal
import psycopg2

#conecta PG
#conecta PG
con = psycopg2.connect(*sensitive data)

classes_prodes = {
0: "Outros",
1: "Floresta",
10: "Desmatamento Consolidado",
15: "Desmatamento Recente"
}
classes_car = {
0: "Sem car",
10: "Grande",
15: "Media",
20: "Pequena"
}

# tiff 
driver = gdal.GetDriverByName('GTiff')
filename = "/dados1/maurano/amz/buffer/prodes_agregado.tif" #path to prodes raster
#filename = "/dados1/maurano/amz/buffer/car/car_categories_buffer.tif" #path to car raster
dataset = gdal.Open(filename)
band = dataset.GetRasterBand(1)

cols = dataset.RasterXSize
rows = dataset.RasterYSize

transform = dataset.GetGeoTransform()

xOrigin = transform[0]
yOrigin = transform[3]
pixelWidth = transform[1]
pixelHeight = -transform[5]

data = band.ReadAsArray(0, 0, cols, rows)

#sql para pegar focos
sql = "SELECT * FROM focos_aqua_referencia where longitude >= -73.9783164486977967 and longitude <= -43.9135843925684242 and latitude >= -18.0406669808370381 and latitude <= 5.2714909087058901 order by id asc"
cur = con.cursor()
cur.execute(sql)
campos = cur.fetchall()

for campo in campos:
    id = str(campo[0])
    lat = float(campo[11])
    lon = float(campo[12])
    col = int((lon - xOrigin) / pixelWidth)
    row = int((yOrigin - lat ) / pixelHeight)
    pixelvalue = data[row][col]
    pixelclasse = classes_prodes[pixelvalue] # trocar clases_prodes por classes_car
    #sql para updae na tabela com classe prodes trocar classe_prodes por clase_car
    query = "UPDATE focos_aqua_referencia SET classe_prodes = '" + pixelclasse + "' WHERE id = " + id + ";"
    cur.execute(query)
    print (query,id,lat,lon,pixelvalue,pixelclasse)
    #print (query)
    
con.commit()
cur.close()
con.close()
